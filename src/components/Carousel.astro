---
import { Icon } from '@astrojs/starlight/components';
---

<div class="embla max-w-lg w-full mx-auto!">
  <div class="embla__viewport overflow-hidden">
    <div
      class="embla__container flex touch-pan-y ml-[calc(var(--slide-spacing) * -1)]"
    >
      <slot />
    </div>
  </div>
  <div class="embla__controls grid grid-cols-[auto_1fr] space-between gap-4">
    <div class="embla__buttons grid grid-cols-2 items-center gap-4">
      <button
        class="embla__button embla__button--prev appearance-none bg-transparent
              flex inline-flex touch-manipulation no-underline cursor-pointer
              border-0 p-0 m-0 size-14 items-center"
        type="button"
      >
        <Icon name="left-arrow" size="2rem" />
      </button>
      <button
        class="embla__button embla__button--next appearance-none bg-transparent
              flex inline-flex touch-manipulation no-underline cursor-pointer
              border-0 p-0 m-0 size-14 items-center"
        type="button"
      >
        <Icon name="right-arrow" size="2rem" />
      </button>
    </div>
    <div
      class="embla__dots flex flex-wrap justify-end items-center"
    ></div>
  </div>
  <noscript>You need to enable JavaScript to run this widget.</noscript>
</div>

<script>
  import EmblaCarousel from 'embla-carousel';
  import type { EmblaCarouselType, EmblaOptionsType } from 'embla-carousel';

  // arrow buttons

  const addTogglePrevNextBtnsActive = (emblaApi: any, prevBtn: any, nextBtn: any) => {
    const togglePrevNextBtnsState = () => {
      if (emblaApi.canScrollPrev()) prevBtn.removeAttribute('disabled')
      else prevBtn.setAttribute('disabled', 'disabled')

      if (emblaApi.canScrollNext()) nextBtn.removeAttribute('disabled')
      else nextBtn.setAttribute('disabled', 'disabled')
    }

    emblaApi
      .on('select', togglePrevNextBtnsState)
      .on('init', togglePrevNextBtnsState)
      .on('reInit', togglePrevNextBtnsState)

    return () => {
      prevBtn.removeAttribute('disabled')
      nextBtn.removeAttribute('disabled')
    }
  }

  const addPrevNextBtnsClickHandlers = (emblaApi: any, prevBtn: any, nextBtn: any) => {
    const scrollPrev = () => {
      emblaApi.scrollPrev()
    }
    const scrollNext = () => {
      emblaApi.scrollNext()
    }
    prevBtn.addEventListener('click', scrollPrev, false)
    nextBtn.addEventListener('click', scrollNext, false)

    const removeTogglePrevNextBtnsActive = addTogglePrevNextBtnsActive(
      emblaApi,
      prevBtn,
      nextBtn
    )

    return () => {
      removeTogglePrevNextBtnsActive()
      prevBtn.removeEventListener('click', scrollPrev, false)
      nextBtn.removeEventListener('click', scrollNext, false)
    }
  }

  // dots

  const addDotBtnsAndClickHandlers = (emblaApi: EmblaCarouselType, dotsNode: Element) => {
    let dotNodes: any[] = []

    const addDotBtnsWithClickHandlers = () => {
      dotsNode.innerHTML = emblaApi
        .scrollSnapList()
        .map(() => '<button class="embla__dot" type="button"></button>')
        .join('')

      const scrollTo = (index: any) => {
        emblaApi.scrollTo(index)
      }

      dotNodes = Array.from(dotsNode.querySelectorAll('.embla__dot'))
      dotNodes.forEach((dotNode, index) => {
        dotNode.addEventListener('click', () => scrollTo(index), false)
      })
    }

    const toggleDotBtnsActive = () => {
      const previous = emblaApi.previousScrollSnap()
      const selected = emblaApi.selectedScrollSnap()
      dotNodes[previous].classList.remove('embla__dot--selected')
      dotNodes[selected].classList.add('embla__dot--selected')
    }

    emblaApi
      .on('init', addDotBtnsWithClickHandlers)
      .on('reInit', addDotBtnsWithClickHandlers)
      .on('init', toggleDotBtnsActive)
      .on('reInit', toggleDotBtnsActive)
      .on('select', toggleDotBtnsActive)

    return () => {
      dotsNode.innerHTML = ''
    }
  }

  // main

  const OPTIONS: EmblaOptionsType = { loop: true, }

  const emblaNode: Element | null = document.querySelector('.embla')

  let viewportNode: HTMLElement | null;
  let prevBtnNode: HTMLElement | null;
  let nextBtnNode: HTMLElement | null;
  let dotsNode: HTMLElement | null;

  let emblaApi: EmblaCarouselType;
  let removePrevNextBtnsClickHandlers;
  let removeDotBtnsAndClickHandlers;

  if (emblaNode != null) {
    viewportNode = emblaNode.querySelector('.embla__viewport')
    prevBtnNode = emblaNode.querySelector('.embla__button--prev')
    nextBtnNode = emblaNode.querySelector('.embla__button--next')
    dotsNode = emblaNode.querySelector('.embla__dots')

    if (viewportNode != null) {
      emblaApi = EmblaCarousel(viewportNode, OPTIONS)

      removePrevNextBtnsClickHandlers = addPrevNextBtnsClickHandlers(
        emblaApi,
        prevBtnNode,
        nextBtnNode
      )

      if (dotsNode != null) {
        removeDotBtnsAndClickHandlers = addDotBtnsAndClickHandlers(
          emblaApi,
          dotsNode
        )

        emblaApi.on('destroy', removePrevNextBtnsClickHandlers)
        emblaApi.on('destroy', removeDotBtnsAndClickHandlers)
      }
    }
  }
</script>

<style is:global>
  @reference "@/src/styles/custom.css";

  .embla__container {
    backface-visibility: hidden;
  }
  .embla__slide {
    @apply min-w-0 flex-[0_0_100%];
  }
  .embla__dot {
    @apply
      appearance-none bg-transparent touch-manipulation flex inline-flex
      cursor-pointer border-0 p-0 size-8 items-center justify-center rounded-full;
  }
  .embla__dot:after {
    box-shadow: inset 0 0 0 0.2rem var(--sl-color-gray-4);
    @apply size-4 rounded-full flex items-center content-[''];
  }
  .embla__dot--selected:after {
    box-shadow: inset 0 0 0 0.2rem var(--sl-color-gray-2);
  }
</style>
